// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Client skeleton

#include <memory>
#include <staff/utils/Log.h>
#include <staff/common/Exception.h>
#include <staff/common/DataObject.h>
#include "TestUnqualifiedProxy.h"
#include "TestQualifiedProxy.h"

int main(int /*nArgs*/, const char* /*paszArgs*/[])
{
  std::string expectQualified = "<ns0:q xmlns:ns0=\"http://tempui.org/test/TEST_DEFAULT_QUALIFIED\" u=\"u attr\" ns0:q=\"q attr\" ns0:d=\"d attr\"><ns0:Item>q1</ns0:Item><ns0:Item>q2</ns0:Item><Item>uq1</Item><Item>uq2</Item><ns0:Item>d1</ns0:Item><ns0:Item>d2</ns0:Item></ns0:q>";
  std::string expectUnqualified = "<ns0:u xmlns:ns0=\"http://tempui.org/test/TEST_DEFAULT_UNQUALIFIED\" d=\"d attr\" u=\"u attr\" ns0:q=\"q attr\"><ns0:Item>q1</ns0:Item><ns0:Item>q2</ns0:Item><Item>uq1</Item><Item>uq2</Item><Item>d1</Item><Item>d2</Item></ns0:u>";
  try
  {
    staff::tests::TestDefaultQualified qual;

    qual.qual.push_back("q1");
    qual.qual.push_back("q2");

    qual.unqual.push_back("uq1");
    qual.unqual.push_back("uq2");

    qual.def.push_back("d1");
    qual.def.push_back("d2");

    qual.q = "q attr";
    qual.u = "u attr";
    qual.d = "d attr";

    staff::DataObject doQual("q");
    doQual << qual;

    const std::string& strQual = doQual.ToString();

    staff::tests::TestDefaultUnqualified unqual;

    unqual.qual.push_back("q1");
    unqual.qual.push_back("q2");

    unqual.unqual.push_back("uq1");
    unqual.unqual.push_back("uq2");

    unqual.def.push_back("d1");
    unqual.def.push_back("d2");

    unqual.q = "q attr";
    unqual.u = "u attr";
    unqual.d = "d attr";

    staff::DataObject doUnqual("u");
    doUnqual << unqual;

    const std::string& strUnqual = doUnqual.ToString();

//    staff::LogInfo()
//            << "\nunqual: " << strUnqual
//            << "\nqual: " << strQual;

    if (expectQualified != strQual)
    {
      staff::LogInfo() << "qualified" << staff::LogResultFailed;
      staff::LogError() << "expectQualified != strQual: \nresult\n\n"
          << expectQualified << "\n\nexpected:\n\n" << strQual;
      return 1;
    }
    staff::LogInfo() << "qualified" << staff::LogResultSuccess;

    if (expectUnqualified != strUnqual)
    {
    staff::LogInfo() << "unqualified" << staff::LogResultFailed;
      staff::LogError() << "expectUnqualified != strUnqual: \nresult\n\n"
          << expectUnqualified << "\n\nexpected:\n\n" << strUnqual;
      return 2;
    }
    staff::LogInfo() << "unqualified" << staff::LogResultSuccess;

    return 0;
  }
  STAFF_CATCH_ALL_DESCR("TEST FAILED")

  return 3;
}

