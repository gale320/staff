# This file generated by staff_codegen
# For more information please visit: http://code.google.com/p/staff/

INTERFACES :=\
#foreach $(Project.Interfaces)
 $(Interface.Name).h\
#end

COMPONENT := $(Project.Interfaces.Interface.Namespace.!dot||Project.Interfaces.Interface.Name.!tolower.!dot)
#ifneq($($bFromInterface),)
CODEGEN_WSDLS :=\
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
 \
#ifneq($(Class.Namespace.!dot),)
$(Class.Namespace.!dot).\
#ifeqend
$(Interface.Name.!dot).\
#ifeq($(Project.Interfaces.$Count),0)
xsd\
#else
wsdl\
#ifeqend
#end
#end
#ifeqend


PLATFORM ?= \$(shell \$(CXX) -dumpmachine)
ifeq (\$(shell uname -o 2>/dev/null),Msys)
  OS := MINGW
else
  OS := \$(shell uname -s)
endif

ifeq (\$(OS),Darwin)
  LIBPREFIX = lib
  LIBEXT = .dylib
  LDLIB = -dynamiclib -Wl,-dylib_install_name -Wl,
  CXXFLAGS += -fPIC
  LDFLAGS += -fPIC
else
ifeq (\$(OS),MINGW)
  LIBPREFIX =
  LIBEXT = .dll
  LDLIB = -shared -Wl,-soname,
  export STAFF_HOME := \$(subst :,,\$(subst \,/,/\$(STAFF_HOME)))
  CFLAGS += -DAXIS2_SKIP_INT_TYPEDEFS
  CXXFLAGS += -DAXIS2_SKIP_INT_TYPEDEFS
else
  LIBPREFIX = lib
  LIBEXT = .so
  LDLIB = -shared -Wl,-soname,
  CXXFLAGS += -fPIC
  LDFLAGS += -fPIC
endif
endif


SRCDIR = $($SRCDIR)
OBJDIR = obj/\$(PLATFORM)/
OUTDIR = out/\$(PLATFORM)/

#ifeq($($c++11),true)
CXXFLAGS += -std=gnu++0x
#ifeqend

ifneq (\$(DEBUG),)
  CXXFLAGS += -D_DEBUG -g -O0
  LDFLAGS += -g -O0
endif

ifneq (\$(HOST_STAFF_HOME),)
  STAFF_CODEGEN ?= STAFF_HOME=\$(HOST_STAFF_HOME) \$(HOST_STAFF_HOME)/bin/staff_codegen
else
ifneq (\$(STAFF_HOME),)
  STAFF_CODEGEN ?= \$(STAFF_HOME)/bin/staff_codegen
else
  STAFF_CODEGEN ?= staff_codegen
endif
endif

ifneq (\$(STAFF_HOME),)
  CXXFLAGS += -I\$(STAFF_HOME)/include/
  LDFLAGS += -L\$(STAFF_HOME)/lib
  INSTALLDIR = \$(STAFF_HOME)/components/
else
  INSTALLDIR = /usr/lib/staff/components/
endif

#ifneq($(Project.Name),Project1)
TARGET := $(Project.Name)
#else
TARGET := \$(COMPONENT)
#ifeqend
TARGETNAME = \$(LIBPREFIX)\$(TARGET)\$(LIBEXT)

LDFLAGS += -lstaffutils -lstaffxml -lstaffcommon -lstaffcomponent
LDFLAGS += \$(LDLIB)\$(TARGETNAME)

#ifneq($($bFromInterface),)
CODEGEN_WSDLS_OUT := \$(patsubst %,\$(OUTDIR)%,\$(CODEGEN_WSDLS))
#ifeqend
CODEGEN_INTERFACES := \$(patsubst %.h,\$(SRCDIR)%.h,\$(INTERFACES))
CODEGEN_HEADERS := \$(patsubst %.h,%Wrapper.h,\$(CODEGEN_INTERFACES)) \$(SRCDIR)ComponentImpl.h
CODEGEN_SOURCES := \$(patsubst %.h,%Wrapper.cpp,\$(CODEGEN_INTERFACES)) \$(SRCDIR)ComponentImpl.cpp
CODEGEN_FILES := \$(CODEGEN_HEADERS) \$(CODEGEN_SOURCES)\
#ifneq($($bFromInterface),)
 \$(CODEGEN_WSDLS_OUT)
#ifeqend

NON_CODEGEN_SOURCES := \$(filter-out \$(CODEGEN_SOURCES),\$(wildcard \$(SRCDIR)*.cpp))
SOURCES := \$(CODEGEN_SOURCES) \$(NON_CODEGEN_SOURCES)
OBJECTS := \$(patsubst \$(SRCDIR)%.cpp,\$(OBJDIR)%.o,\$(SOURCES))

.NOTPARALLEL: \$(CODEGEN_FILES)

# == make ===========================================
make: "\$(OBJDIR)" "\$(OUTDIR)" \$(OUTDIR)\$(TARGETNAME)

all: make

# link
\$(OUTDIR)\$(TARGETNAME): \$(OBJECTS)
	\$(CXX) \$(OBJECTS) -o \$(OUTDIR)\$(TARGETNAME) \$(LDFLAGS)

# compile
\$(OBJDIR)%.o: \$(SRCDIR)%.cpp
	\$(CXX) \$(CXXFLAGS) -c $< -o $@

\$(NON_CODEGEN_SOURCES): \$(CODEGEN_FILES)

\$(SRCDIR)%Wrapper.h \$(SRCDIR)%Wrapper.cpp:: \$(SRCDIR)%.h
	\$(STAFF_CODEGEN) -u -tcomponent -c\$(SRCDIR) \$(INTERFACES)\
#ifeq($($c++11),true)
 -dc++11
#ifeqend

\$(SRCDIR)ComponentImpl.h \$(SRCDIR)ComponentImpl.cpp:: \$(CODEGEN_INTERFACES)
	\$(STAFF_CODEGEN) -u -tcomponent -c\$(SRCDIR) \$(INTERFACES)\
#ifeq($($c++11),true)
 -dc++11
#ifeqend

#ifneq($($bFromInterface),)
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
\$(OUTDIR)\
#ifneq($(Class.Namespace.!dot),)
$(Class.Namespace.!dot).\
#ifeqend
$(Interface.Name).\
#ifeq($(Project.Interfaces.$Count),0)
xsd\
#else
wsdl\
#ifeqend
: \$(SRCDIR)$(Interface.Name).h
	\$(STAFF_CODEGEN) -u -twsdl \$(patsubst \$(SRCDIR)%,%,$<) -i\$(SRCDIR) -o\$(OUTDIR)
#end
#end
#ifeqend

# == install ========================================
install: "\$(INSTALLDIR)\$(COMDIR)\$(COMPONENT)/"
	cp -f \$(OUTDIR)\$(TARGETNAME) \$(INSTALLDIR)\$(COMDIR)\$(COMPONENT)/
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
	cp -f \
#ifneq($($bFromInterface),)
\$(OUTDIR)\
#ifneq($(Class.Namespace.!dot),)
$(Class.Namespace.!dot).\
#ifeqend
$(Interface.Name).\
#else
$(Interface.FileName) \$(INSTALLDIR)\$(COMDIR)\$(COMPONENT)/$(Class.NsName.!dot).\
#ifeqend
#ifeq($(Project.Interfaces.$Count),0)
xsd\
#else
wsdl\
#ifeqend
#ifneq($($bFromInterface),)
 \$(INSTALLDIR)\$(COMDIR)\$(COMPONENT)/\
#ifeqend

#end
#end

# == uninstall ======================================
uninstall:
	rm -f \$(INSTALLDIR)\$(COMDIR)\$(COMPONENT)/\$(TARGETNAME)
#foreach $(Project.Interfaces)
#foreach $(Interface.Classes)
	rm -f \
\$(INSTALLDIR)\$(COMDIR)\$(COMPONENT)/$(Class.NsName.!dot).\
#ifeq($(Project.Interfaces.$Count),0)
xsd
#else
wsdl
#ifeqend
#end
#end
	test ! -d \$(INSTALLDIR)\$(COMDIR)\$(COMPONENT) || rmdir \$(INSTALLDIR)\$(COMDIR)\$(COMPONENT)

# == clean ==========================================
clean:
	rm -f \$(OUTDIR)\$(TARGETNAME) \$(OBJECTS) \$(CODEGEN_FILES)
	-test ! -d \$(OBJDIR) || rmdir -p \$(OBJDIR)
	-test ! -d \$(OUTDIR) || rmdir -p \$(OUTDIR)

# == mkdir ==========================================
"%/":
	@[ -z "$@" -o -d "$@" ] || mkdir -p $@ && chmod g+w $@
