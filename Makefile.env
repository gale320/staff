# environment file for make

ifeq ($(MAKEFILE_ENV_INCLUDED),)

define newline


endef

ifeq ($(shell uname -o 2>/dev/null),Msys)
  OS := MINGW
else
  OS := $(shell uname -s)
  OSVERSION := $(shell uname -r)
  ANDROID := $(findstring android,$(CC))
endif

ifneq ($(OS),Darwin)
CXX ?= g++
CC ?= gcc
else
CXX = g++
CC = gcc
endif

CROSSCOMPILE := $(shell $(CXX) -dumpspecs | sed -n '/cross_compile:/{n;p;}')

ifeq ($(CROSSCOMPILE),1)
CXXHOST ?= g++
CCHOST ?= gcc
else
CXXHOST ?= $(CXX)
CCHOST ?= $(CC)
endif

# target platform
ifeq ($(PLATFORM),)
PLATFORM := $(shell $(CXX) -dumpmachine)
endif
# host platform
ifeq ($(HOSTPLATFORM),)
HOSTPLATFORM := $(shell $(CXXHOST) -dumpmachine)
endif

ifneq ($(findstring winsdk,$(PLATFORM)),)
HOSTOS := $(OS)
OS := WINSDK
EXEC_EXT = .exe
else
ifneq ($(findstring mingw,$(PLATFORM)),)
HOSTOS := $(OS)
OS := MINGW
EXEC_EXT = .exe
endif
endif
ifeq ($(CROSSCOMPILE),1)
HOSTMAKEFLAGS += OS=$(HOSTOS) CC=$(CCHOST) CXX=$(CXXHOST) PLATFORM=$(HOSTPLATFORM)-cross HOSTBUILD=1 MAKEFILE_ENV_INCLUDED=
HOSTMAKEFLAGS += STAFF_HOME=$(STAFF_HOME) AXIS2C_HOME=$(HOST_AXIS2C_HOME) EXEC_EXT=
else
HOSTBUILD = 1
endif

TOPDIR := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))/

STAFF_HOME ?= /usr/local/lib/staff
include $(TOPDIR)VERSION
VERSION = $(LIBRARY_VERSION)
VERSION_MAJOR := $(firstword $(subst .,$(empty) $(empty),$(VERSION)))
REVISION := $(shell LANG=C svn info --non-interactive 2>/dev/null | sed -n '/^Revision:/s/.*:[ \t]//p' 2>/dev/null)
ifneq ($(REVISION),)
VERSION_FULL := $(VERSION)-r$(REVISION)
else
VERSION_FULL := $(VERSION)
endif

SRCDIR = src/
OBJDIR = obj/$(PLATFORM)/
OUTDIR = out/$(PLATFORM)/
BINDIR = bin/
LIBDIR = lib/

COMPILER_FLAGS =
LINKER_FLAGS =

ifneq ($(DEBUG),)
  COMPILER_FLAGS += -D_DEBUG -g -O0
  LINKER_FLAGS += -g -O0
endif

COMPILER_WARNING_FLAGS = -Wall -W -pedantic -Wno-long-long
COMPILER_FLAGS += $(COMPILER_WARNING_FLAGS)

ifeq ($(OS),Linux)
  LINUX_VERSION := $(shell find /etc/ -maxdepth 1 -regex '.*[-_]version' -printf '%f\n' | sed -n '1{s/\([^-_]*\).*/\1/g;s/[^a-zA-Z0-9_]/_/g;p}')
  LINUX_RELEASE := $(shell find /etc/ -maxdepth 1 -regex '.*[-_]release' -printf '%f\n' | sed -n '1{s/\([^-_]*\).*/\1/g;s/[^a-zA-Z0-9_]/_/g;p}')
endif

VPATH = $(SRCDIR)

ifeq ($(OS),SunOS)
  COMPILER_FLAGS += -fPIC 
  LINKER_FLAGS += -fPIC -lpthread -lposix4
  HOSTMAKEFLAGS += HOSTLDFLAGS=-lpthread AXIS2C_HOME=$(HOST_AXIS2C_HOME)
  COMPILER_FLAGS += -DAVOID_VERSION
  AVOID_VERSION = 1
  LN = @true
  SUNVERSION := $(shell echo $(OSVERSION) |sed 's/[^\.]*\.//')
  WHEREISCMD := $(shell if [ $(SUNVERSION) -gt 10 ] ; then echo whereis; else echo /usr/ucb/whereis; fi >sun )
else
WHEREISCMD=whereis
ifeq (,$(filter $(OS),MINGW WINSDK))
  COMPILER_FLAGS += -fPIC -pthread
  LINKER_FLAGS += -fPIC
ifneq ($(OS),Darwin)
  COMPILER_FLAGS += -rdynamic
endif
ifeq ($(ANDROID),)
  LINKER_FLAGS += -pthread
  LN = ln -nsf
else
  AVOID_VERSION = 1
  HOSTMAKEFLAGS += HOSTLDFLAGS=-pthread AXIS2C_HOME=$(HOST_AXIS2C_HOME)
  COMPILER_FLAGS += -DAVOID_VERSION
  LN = @true
endif
else
ifneq ($(CROSSCOMPILE),1)
  COMPILER_FLAGS += -Wno-pedantic-ms-format
endif
  COMPILER_FLAGS += -DAVOID_VERSION
  LN = @true
  AVOID_VERSION = 1
endif
endif

CFLAGS += $(COMPILER_FLAGS)
LFLAGS += $(LINKER_FLAGS)
CXXFLAGS += $(COMPILER_FLAGS)
LDFLAGS += $(LINKER_FLAGS)

ECHO := echo$(shell test -z "$$(echo -e)" && echo ' -e ')

ifneq ($(VERSION),)
  DVERSION = .$(VERSION)
  DVERSIONM = .$(VERSION_MAJOR)
endif

LIBRARY_PREV_PATH_ENV = :$${$(LIBRARY_PATH_ENV)}
ifeq ($(OS),Darwin)
  LIBPREFIX = lib
  LIBEXT = .dylib
  LIBVEREXT = $(DVERSION)$(LIBEXT)
  LIBVEMREXT = $(DVERSIONM)$(LIBEXT)
  LDLIB = -dynamiclib -Wl,-dylib_install_name -Wl,
  LIBRARY_PATH_ENV = DYLD_LIBRARY_PATH
else
ifneq (,$(filter $(OS),MINGW WINSDK))
  LIBPREFIX =
  LIBEXT = .dll
  LIBVEREXT = $(LIBEXT)
  LIBVERMEXT = $(LIBEXT)
  LDLIB = -shared -Wl,-soname,
  AXIS2C_HOME := $(subst :,,$(subst \,/,/$(AXIS2C_HOME)))
  STAFF_HOME := $(subst :,,$(subst \,/,/$(STAFF_HOME)))
ifeq ($(OS),MINGW)
  CFLAGS += -DAXIS2_SKIP_INT_TYPEDEFS
  CXXFLAGS += -DAXIS2_SKIP_INT_TYPEDEFS
ifneq ($(CROSSCOMPILE),1)
  LIBRARY_PATH_ENV = PATH
  CC = gcc
else
  LIBRARY_PATH_ENV = LD_LIBRARY_PATH
endif
else
  LIBRARY_PATH_ENV = LD_LIBRARY_PATH
endif
else
ifeq ($(OS),SunOS)
  LIBPREFIX = lib
  LIBEXT = .so
  LIBVEREXT = $(LIBEXT)
  LIBVERMEXT = $(LIBEXT)
  LDLIB = -shared -Wl,-h,
else
  LIBPREFIX = lib
  LIBEXT = .so
ifeq ($(ANDROID),)
  LIBVEREXT = $(LIBEXT)$(DVERSION)
  LIBVERMEXT = $(LIBEXT)$(DVERSIONM)
else
  LIBVEREXT = $(LIBEXT)
  LIBVERMEXT = $(LIBEXT)
endif

  LDLIB = -shared -Wl,-soname,
endif

  LIBRARY_PATH_ENV = LD_LIBRARY_PATH
endif
endif

ifeq ($(LINUX_RELEASE),MCBC)
  APXS := $(shell which /www/bin/apxs 2>/dev/null)
else
ifeq ($(OS),SunOS)
  APXS := $(shell bash type /usr/bin/apxs /usr/bin/apxs2 2>/dev/null)
  ifeq ($?,1)
    undefine APXS
  endif
else
  APXS := $(shell which apxs2 apxs 2>/dev/null | head -1)
endif


ifneq ($(APXS),)
  ifeq ($(OS),SunOS)
    APXSREAL := $(shell ls -la $(APXS)|awk '{ print $$11 }')
  else
    APXSREAL := $(shell readlink $(APXS))
  endif
  ifneq ($(APXSREAL),)
    APXS := $(APXSREAL)
  endif
  endif
endif


INSTALLINCDIR = $(STAFF_HOME)/include/
INSTALLLIBDIR = $(STAFF_HOME)/lib/

DEPLOYDIR = $(TOPDIR)deploy/$(PLATFORM)/
DEPLOYINCDIR = $(DEPLOYDIR)$(INSTALLINCDIR)
DEPLOYLIBDIR = $(DEPLOYDIR)$(INSTALLLIBDIR)

MAKEFILE_ENV_INCLUDED = 1

endif

.EXPORT_ALL_VARIABLES:
